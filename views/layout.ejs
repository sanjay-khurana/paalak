<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/common.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/paalak.css">
    <!--STYLES END-->
  </head>

  <body>
  <div class="page-wrapper">
  <header>
    <div class="main-wrapper">
      
      <div class="clear"></div>
      <img class="logo" src="/images/paalak-logo.jpg">

      <div class="fr">
        <div class="tab-desk-only"> 
          <img src="/images/phone-icon.png" width="18px"> 01139588188 &nbsp; &nbsp; &nbsp; &nbsp;
          <img width="20px" src="/images/whatsapp-icon.png"> 09545857545
        </div>
        <% if (req.isLoggedIn) { %>
        <div class="user-icon" >
          <span class="tab-desk-only"><%= req.user.name  %><i class="arrow-down" aria-hidden="true"></i></span>
        </div>
       <% } else { %>
        <div class="user-icon">
            <a href="javascript:void(0);" id="login-div" data-toggle="modal" data-target="#otp"><span class="login">Login</span></a>
        </div>
         <% } %> 
        <div class="cart mob-tab-only" data-toggle="modal" data-target="#modal-cart">
          <span class="tab-desk-only dsk-count"><span class=""></span> Item(s)</span>
        </div>

      </div>
    </div>
  </header>
  <div class="mob-only" style="padding:10px; border-bottom: 1px solid #fff">
    <div class="fl"><img src="/images/phone-icon.png" width="18px"> 01139588188 &nbsp; &nbsp; &nbsp; &nbsp;</div>
    <div class="fr"><img width="20px" src="/images/whatsapp-icon.png"> 09545857545</div>
    <div class="clear"></div>
  </div>
    <%- body %>

    <div id="otp" class="modal fade" role="dialog">
        <div class="modal-dialog">

          <!-- Modal content-->
          <div class="modal-content generateOtp">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal">&times;</button>
              <h4 class="modal-title">Enter Your Mobile Number</h4>
            </div>
            <div class="modal-body">
              <div class="col-md-8">
            <input id="contact-no" name="OTP" type="number" minlength="10" maxlength="10" placeholder="" class="form-control input-md">
            <div class="error hidden">Please enter correct number</div>               
          </div><br><br>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" id="generate-otp" >Generate</button>
            </div>
          </div>

        </div>
        <div class="modal-content verifyOtp hidden">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal">&times;</button>
              <h4 class="modal-title">Enter OTP</h4>
            </div>
            <div class="modal-body">
              <div class="col-md-8">
            <input id="otp-no" name="OTP" type="number" minlength="4" maxlength="4" placeholder="" class="form-control input-md">
            <div class="error hidden">OTP not correct</div>               
          </div><br><br>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" id="verify-otp">Submit</button>
            </div>
          </div>

        </div>
      </div>
     </div>

     <footer class="footer">
        <div class="main-wrapper">
          <a href="/about-us/">About Us </a> | 
          <a href="/privacy-policy/">Privacy Policy </a> |
          <a href="/refund-cancellation-policy/">Refund & Cancellation Policy </a> |
          <a href="/we-do-bulk-supplies/">Bulk Supplies</a> |
          <a href="/contact/">Contact Us</a> 
        </div>
     </footer> 
     </div>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-3.1.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/catalog.js"></script>
    <script src="/js/jquery.cookie.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
